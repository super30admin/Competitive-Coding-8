/*
TC: O(m + n) as we are traversing both strings
SC: O(n) as we using hashmap to store frequency
 */

class MinWidow{
    //base
        if ( t== null || t.length() == 0) return null;
        if (s.length() < t.length()) return "";
        if (s.equals(t)) return s;

    Map<Character, Integer> map = new HashMap<>();
        for (int i =0; i < t.length(); i++){
        char c = t.charAt(i);
        map.put(c,map.getOrDefault(c,0)+1);
    }
    int j = 0;
    int match = 0;
    int minLen = Integer.MAX_VALUE;
    int minStart = 0;

        for (int i = 0; i < s.length(); i++){
        char in = s.charAt(i);
        if (map.containsKey(in)){
            int count = map.get(in);
            count--;
            if (count >= 0){
                match ++;
            }
            map.put(in,count);
        }

        while (match == t.length()){
            if (minLen > i - j +1){
                minLen = i - j + 1;
                minStart = j;
            }

            char out = s.charAt(j);
            if (map.containsKey(out)){
                int count = map.get(out);
                count++;
                if (count == 1){
                    match--;
                }
                map.put(out, count);
            }
            j++;
        }
    }

        return minLen == Integer.MAX_VALUE ? "" : s.substring(minStart,minStart + minLen);
}
