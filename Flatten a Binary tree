/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public void flatten(TreeNode root) {
       if(root==null)return;
        
        if(root.left != null){
            flatten(root.left);
            TreeNode temp = root.right;
            root.right = root.left;
            root.left = null;
			
            TreeNode tempRight = root.right;
            while(tempRight.right != null){
                tempRight = tempRight.right;
            }
            
            tempRight.right = temp;
        }
        
        if(root.right != null){
            flatten(root.right);
        }
    }
    
}
// Time Complexity: O(n)
// Space Complexity: O(h)
// Approach: flatten left side and then move left side of tree right and flatten the left subtree and merge 
