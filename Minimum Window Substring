//TC: O(s.length() + T.length()) ??
//SC: O(1) HashMap max 26

//Approach: 

class Solution {
    public String minWindow(String s, String t) {
        if(s==null || t==null || s.length()==0 || t.length()==0 || s.length() < t.length()){
            return "";
        }
        HashMap<Character, Integer> hmap = new HashMap<>();
        int left = 0;
        int right = 0;
        int minLength = t.length();
        for(char c : t.toCharArray()){
            hmap.put(c,hmap.getOrDefault(c,0)+1);
        }
        int min = 0;
        int count = t.length();
        int j = 0;
        int i;
        for(i = 0 ; i < s.length() ; i++){
            char curr = s.charAt(i);
            if(hmap.containsKey(curr)){
                hmap.put(curr, hmap.get(curr) - 1);
                if(hmap.get(curr)>=0){
                    count--;        //all instances of current character found
                }
                //keep moving left pointer until we have all required letters in substring from i to j
                while(count == 0){
                    int currLength = i - j + 1 ;
                    if(currLength<minLength){
                        left = j;   //new start of substring containing all characters from t
                        minLength = currLength;
                    }
                    
                    char outgoing = s.charAt(j);
                    if(hmap.containsKey(outgoing)){
                        hmap.put(outgoing, hmap.get(outgoing)+1);  //Increase count of removed character in t
                        if(hmap.get(outgoing)>0){
                            count++;    
                        }
                    }
                        j++;        //else move left pointer forward
                }
            }
        }
        // System.out.println("i "  + i + " " + " j " + j + " left " + left + " right " + right);
        if(minLength > s.length()){
                return "";
        }
        // System.out.println(hmap);
        return s.substring(left,left + minLength);
    }
}
